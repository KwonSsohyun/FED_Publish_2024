- CSS 우선 순위
	동일한 요소에 동일한 CSS를 사용했을 때 
	어떤것이 먼저 적용되는지 우선순위가 있다.
	
	1. CSS속성값 뒤에 !important를 붙힌 경우
	2. 요소에 인라인 스타일로 CSS를 적용한 경우
	3. 선택자로 id선택자를 사용한 경우
	4. 선택자로 class 선택자를 사용한 경우
	5. 선택자로 태그 선택자를 사용한 경우

	** 우선순위가 같은 경우에는
	   더 상세하게 선택자를 작성한 요소가 우선순위가 높다.
	
	   선택자도 동일하다면
	   나중에 작성한 CSS가 우선으로 적용된다.

	** 인라인 스타일, !important는 최대한 사용하지 않는게 좋다.

- 구체성 점수
	태그 선택자 : +1
	클래스 선택자 : +10
	아이디 선택자 : +100



- 그리드(Grid)
	1. CSS의 그리드 레이아웃은 
	   웹페이지의 레이아웃을 잡기위한 2차원 레이아웃 시스템
	2. 행과 열로 이루어진 2차원 구조로 레이아웃을 잡을 수 있다.
	3. 페이지에서 페이지로 이동할 때 요소의 높이나 너비가 동일하다면
	   페이지의 일관성을 높힐 수 있다.
	4. 컨텐츠를 행과 열로 배치할 수 있으며 
	   복잡한 레이아웃을 직관적으로 구축할 수 있는 여러가지 속성들이 있다.

- Flex Box와 Grid의 차이점
	1. Flex Box는 한 방향 레이아웃 시스템 (1차원)
	2. Grid는 두 방향 레이아웃 시스템 (2차원)

- Grid 구성
	1. grid-container
		grid 레이아웃을 배치하려는 요소들을 감싸고 있는 부모요소
	2. grid-item
		grid container의 자식요소로 실질적으로 배치하고 싶은 요소
	3. column
		grid container의 열 방향 배치
	4. row
		grid container의 행 방향 배치
	5. gutter
		행과 열 사이의 공백을 의미한다.

- Grid-container 주요 속성
	1. display : grid
		해당 요소를 grid-container로 만드는 속성

	2. grid-template-columns : 1열크기 2열크기 3열크기 ,...
		길이나 백분율 단위를 이용해서 각각의 열을 배치하는 속성
		열마다 길이를 설정할 수 있고,
		fr단위도 사용할 수 있다.

	3. grid-template-rows : 1행크기 2행크기 3행크기,...
		길이나 백분율 단위를 이용해서 각각의 행을 배치하는 속성
		행마다 길이를 설정할 수 있고,
		fr단위도 사용할 수 있다.

		repeat(반복횟수, 크기)

	4. column-gap : 열과 열 사이의 간격
	5. row-gap : 행과 행 사이의 간격
	6. gap : 행간격 열간격;


- 그리드 라인기반 배치
	그리드 아이템을 배치할 때 그리드 선의 "시작라인"과 "종료라인"을 지정해서
	라인 기반 배치를 할 수 있다.
	요소에 라인을 지정해주거나 span키워드 사용할 수 있다.

	1. 열 라인은 그리드 컨테이너의 맨 왼쪽 으로부터 1로 시작한다.
	2. 행 라인은 그리드 컨테이너의 맨 윗쪽 으로부터 1로 시작한다.
	** 항상 그리드 컨테이너 라인의 개수는 요소의 개수보다 1크다.

- 라인 기반 배치 속성
	1. grid-column-start : 배치를 시작할 열의 라인을 선택
	2. grid-column-end : 배치를 종료할 열의 라인을 선택
	3. grid-column : 시작라인 / 종료라인;
			 라인이 아니라 몇 개의 칸을 차지하고 싶을 때는
			 span 키워드를 붙힌다.

	4. grid-row-start : 배치를 시작할 행의 라인을 선택
	5. grid-row-end : 배치를 종료할 행의 라인을 선택
	6. grid-row : 시작라인 / 종료라인;


- 영역이름으로 그리드 배치 : grid-template-areas 속성
	그리드 아이템에 이름을 붙히고 
	그리드컨테이너에서 해당 이름을 이용해 배치할 수 있는 속성

	1. 각 grid-item 요소들에 각각 grid-area 속성을 이용해서 영역 이름을 설정해준다.
	2. grid-container에 grid-template-areas 속성으로 
	   각 item들의 이름으로 레이아웃을 배치한다.


- grid-template-areas 규칙
	1. 그리드로 이루어진 전체 셀을 그리드 아이템으로 채워줘야한다.
	2. 한 줄의 큰따옴표""는 하나의 행을 의미한다.
	3. 한 줄의 큰따옴표 안에서 사용한 각각의 grid-area이름이 하나의 열을 의미한다.
	   ex) 2행 3열의 컨테이너 만드는것
               "item1 item2 item3" 
	       "item1 item2 item3"
	4. 여러개의 셀을 합치려면 해당 grid-area이름을 반복한다.
	5. 셀을 비우려면 .을 사용한다.
	   ex) "item1 item2 item3" 
	       "item1 item2 ."
	6. 영역은 반드시 직사각형, 정사각형의 형태여야한다.
	   ex) L자로 배치하거나 ㄱ자로 배치할 수 없다.




- Box-Shadow 속성
	div같은 박스요소에 그림자 효과를 나타낼 수 있는 속성

- Box-shadow 속성의 속성값
	box-shadow : 박스와 그림자 간의 x축 거리 (양수:오른쪽, 음수:왼쪽)
		     박스와 그림자 간의 y축 거리 (양수:아래쪽, 음수:위쪽)
		     그림자 흐림 정도 (음수:사용불가)
		     그림자 확대, 축소 정도 (양수:확대, 음수:축소)
		     그림자 색상




- background-image 속성
	요소의 배경 이미지를 지정할 수 있는 속성

	background-image : url("불러오고싶은 이미지 경로");

	** 이미지의 크기가 요소보다 작을 시
	   이미지가 반복되서 나온다.

- background-image 관련 속성
	background-repeat : no-repeat; => 배경 이미지를 반복하지 않겠다.
	background-size : cover; => 배경 이미지가 해당 요소 크기에 맞게 채운다.

	** 주의할 점 : 사진 이미지 크기 주의해서 넣어줘야 이미지가 깨지지 않는다.
	



** 텍스트 자체는 뷰포트에 반응하지 않는다. (화면 줄이면 겹쳐 보인다.)












