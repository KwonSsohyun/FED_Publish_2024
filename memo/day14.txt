- 제어문
	프로그램의 실행흐름을 제어할 수 있는 문법
	프로그램 실행흐름 : 프로그램이 실행되는 순서
	
	- 조건문, 반복문, 기타제어문


	▶ 조건문
		특정 조건에 따라 코드가 실행될지 말지를 결정할 수 있는 문법
		if문, else if문, else문, switch문

		● if문
		  if(조건식){
			// if문의 소괄호 안의 조건식이 true를 반환할 때 실행할 코드
		  }

		  * if문 소괄호안의 
		    조건식이 true를 반환하면 중괄호 영역안의 코드를 실행시킨다.
		    조건식이 false를 반환하면 중괄호 영역안을 무시한다.


		- else if문
		  if(조건식){

		  } else if(조건식){
			// if문의 조건식이 false를 반환하고
			// 해당 else if문의 조건식이 true를 반환할때 실행할 코드
		  } else if(조건식){

		  }

		  * else if문을 기준으로 위에 있는 조건식에서 전부 false가 나오고
		    해당 else if문의 조건식에서 true가 나올때 영역안의 코드를 실행한다.
		    else if문을 여러개 달아줄 수 있다.


		- else문
		  if(조건식){

		  } else{
			// 위에 있는 조건식에서 false가 반환될때 실행할 코드
		  }

		  * 위에 작성한 if문과 else if문에서 전부 false가 나와야
		    else문 영역의 코드를 실행한다.



		● switch문
			1. 처리해야하는 경우의 수가 많을 때 유용한 조건문
			2. if문과 달리 조건식이 아닌 표현식을 작성한다.
			   표현식 : 어떠한 값을 반환하는 식
				  변수명, 상수명, 연산식, 함수 호출
			3. 표현식이 반환하는 값을 정확하게 알고있어야 사용할 수 있다.
			4. case문 안에서 break문을 작성해야 
			   해당 switch문을 빠져나갈 수 있다.

			switch(표현식(변수명)){
				case 값1 :
					// 표현식이 반환하는 값이 값1일때 실행할 코드
					break;
				case 값2 :
					// 표현식이 반환하는 값이 값2일때 실행할 코드
					break;
				,,...
				default : 
					// 위 case문에서 표현식이 반환하는 값을
					   아무도 잡지 못했을 때 실행할 코드
			}



	▶ 반복문
		특정코드를 반복실행하고 싶을 때 사용하는 문법
		for문, while문, do...while문
 
		● for문
		  for(초기식; 조건식; 증감식){
				// 반복 실행하고 싶은 코드
		  }

		  1. 초기식 : 처음에 설정할 값 => 변수 한개를 초기화한다.
		  2. 조건식 : 조건식이 true가 반환되면 for문 영역안에 있는 코드를 한번 실행
			    조건식에서 false가 반환되면 for문 종료
		  3. 증감식 : 초기식에서 설정한 값이 반복하는 동안 얼마나 증가,감소할지를 정하는 식이다.
			    (증감 연산자, 복합대입 연산자를 사용한다.)

		  - for문 실행순서
			제일 먼저 초기식이 수행되고 이 다음부터는 조건식이 true인 동안
			"조건식" => "반복실행할 문장" => "증감식" 순서로 반복 실행한다.
			증감식에 의해서 변수값이 증가, 감소 하다가 조건식에서 false를 반환하는 순간
			for문이 종료된다.



		● while문
		  while(조건식){
			// 반복실행할 코드
		  }

		  * 조건식이 true를 반환하면 중괄호 영역 안의 코드를 반복실행한다.

		  - while문 실행순서
			조건식 판별 => 조건식이 참이라면 영역안의 코드를 한번 실행 => 다시 조건문 검사
			=> 조건식이 false를 반환할때까지 위 작업을 반복한다.



		● do...while문
		  do{
			// 반복할 코드
		  }
		  while(조건문)

		  => 조건문의 결과와 상관없이 무조건 do 블록의 코드가 적어도 1번은 실행됩니다.
		     조건문을 판단하기 전에 do 블록의 코드를 먼저 실행합니다.
		     그리고, 조건문을 판단하여, 조건문의 결과가 true이면 do 블록의 코드를 다시 실행합니다.
		     이 과정을 반복합니다.
	


		▶ for문 / while문 차이점
			1. for문		: 정확하게 몇번 반복할지 알고 있을 때 주로 사용한다.
			2. while문	: 정확하게 몇번 반복해야할지 모를 때 주로 사용한다.
				     	  → 주로 일단 while문을 무한반복 시킨 다음에
					    특정한 조건에 break를 줘서 반복을 종료하도록 만든다.

					    while(true){
						if(반복이 종료되는 조건식){
							break;
						}	
					    }



		▶ while문 / do...while문 차이점
			1. while문	: 처음 while문을 실행시켰을 때 while문의 결과가 false이면
					  while문 안의 코드블록은 한 번도 실행되지 않을 수도 있다.
			2. do...while문	: 조건문의 결과와 상관없이 무조건 do 블록의 코드가 적어도 1번은 실행됩니다.




	▶ 기타 제어문
		● break		: break를 만나는 순간 즉시 반복문 영역을 빠져나간다.
			  	  switch문 안에 작성한 경우 해당 switch문 영역을 빠져나간다.
			  	  * 반복문을 강제로 종료하고 싶을 때 사용한다.

		● continue 	: continue키워드를 만나는 순간 즉시 다음 반복구간으로 넘어간다.
			     	  * 주로 반복문 안에서 특정 반복구간을 뛰어넘고 싶을때 사용한다.	





- 함수(Function)
	1. 주어진 값에 정해진 처리를 하여 그 결과를 반환하는 기능
	   특정 기능을 수행하는 코드, 코드들의 모임

	2. 반복되는 코드, 행위, 기능들을 쉽게 관리하기 위해서 선언해서 사용한다.
	3. 기능을 수행하는 코드를 하나의 이름으로 저장해 놓은 것

	

	- 함수 정의
		함수를 만드는 것을 의미한다.
		function키워드를 이용해서 정의할 수 있다.



	- 기본 구조
		function 함수명(매개변수){
			// 함수를 사용했을 때 순서대로 실행할 코드 ▶ 함수의 기능
			return 반환값;
		}


		1. function	: 이제부터 함수를 정의하겠다라는 의미 키워드
		2. 함수명		: 변수명처럼 마음대로 지어주되 왠만하면 동사로 작성하는 것이 좋다.

		3. 매개변수	: 함수가 기능을 수행하는데 
				  외부로부터 어떠한 값을 받아와야한다면 값을 받아올 변수를 선언한다.
				  함수를 사용하는 쪽에서 넘겨주는 데이터를 받아올 매개체 역할을 하는 저장공간
				  
				  넘겨받을 데이터가 여러개라면 매개변수도 여러개 선언할 수 있다.
				  만약 넘겨받을 데이터가 필요없다면 매개변수 생략 가능하다.

		4. 실행할 문장 {}	: 해당 함수를 사용했을 때 실행될 코드를 작성한다.
				  해당 함수를 사용하면 함수 영역 안의 코드를
				  위에서부터 아래로 순차적으로 실행한다.
				  ▶ 함수의 기능

		5. return 반환값	: 함수가 기능을 수행하고나서 이 함수를 사용한 쪽에 돌려줄 값이 있다면
				  return키워드 옆에 반환값으로 작성하면 된다.

				  함수가 어떠한 기능을 수행하고 사용한 쪽에 돌려줄 값이 없다면
				  return 생략 가능하다.

				  * return이 있는 함수는 함수를 사용한 부분자체를 하나의 값으로 본다.
				    return이 없는 함수는 함수를 사용한 부분자체를 값으로 보지 않는다.(단지 어떠한 기능만 수행하는 것)


				    let a = console.log();	→ 반환이 없기에 값을 넣을 수 없음
				    let b = prompt();		→ 반환이 있기에 값을 넣을 수 있음 (반환값)



	- 함수 호출(사용)
		① 만들어 놓은 함수를 사용할 때 → 함수명();
		② 함수명(인수/인자값); → 함수에 매개변수가 있을 때에는 매개변수에 전달될 데이터를 넘겨줘야한다.
				     console.log("권소현");	→ 매개변수 O, 리턴 X


	- 인수／인자와 매개변수
		인수／인자값	: 함수를 호출하는 쪽에서 함수에 넘겨주는 데이터
		매개변수		: 함수 내에서 기능을 수행하기 위해 필요한 인수를 받아오는 변수



	- 디폴트 매개변수(Default Parameter)
		1. 전달되는 인수가 없을 경우에 사용할 수 있도록 매개변수에 기본값을 설정하는것
		2. 매개변수가 여러개 있을 때는 맨 뒤에있는 매개변수부터 디폴트값을 설정한다.





- 익명함수, 화살표함수

	▶ 익명 함수
		이름이 없는 함수이며 변수에 저장해서 사용한다.

		- 기본 구조
		  let 변수명 = function (매개변수){
				  // 실행할 코드
				  return 반환값;
			      };


		- 함수 호출(사용)
		  변수명();
		  변수명(인수/인자값);



	▶ 화살표 함수
		익명함수를 더 편하게 사용할 수 있는 표기법

		- 화살표 함수 문법
		  1. function 키워드 생략한다.
		  2. 소괄호옆에 화살표 =>를 작성한다.
		  3. 매개변수 하나인 경우에 소괄호를 생략할 수 있다.

		  4. 실행할 문장이 한 문장인 경우 중괄호를 생략할 수 있다.
		     단, return이 있다면 중괄호 생략불가

		  5. 실행할 문장이 한 문장이고 return값이 있는 경우
		     return 과 중괄호를 모두 생략할 수 있다.





- 객체(Object)
	실제로 존재하는 사물이나 개념
	속성과 기능으로 이루어진 어떠한 것

	객체를 이루는 데이터(속성, 프로퍼티)와 기능을 모아둔 것 => 객체



- JavaScript에서의 객체
	1. 데이터를 저장하고 처리하는 데이터의 기본단위
	2. 자바스크립트는 객체기반의 스크립트 언어이며 자바스크립트를 이루고있는 거의 모든 것들이
	   객체라고 봐도 무방하다.
	3. 원시타입(number,string같은 기본자료형) 외에 모든 데이터타입은 object(객체 타입)이다.
	4. 객체는 그 객체를 이루는 프로퍼티와 메서드(기능)으로 이루어져 있다.

	   - 프로퍼티(Property)	: 키로 이름을 구별하고 해당 키와 값으로 구성되어있다.
	   - 키(key)		: 집합에서 특정한 값을 찾기위해 다른 값들과 비교하는 값

	5. 프로퍼티는 key(키)와 value(값)로 이루어져 있으며 값의 위치에 함수가 올 수도 있다.
	6. 프로퍼티의 값이 함수인 경우 일반 함수와 구분하기 위해 "메서드"라고 부른다.



	▶ 객체 생성
		자바스크립트는 다양한 방법으로 객체를 만들 수 있다.


	▶ 객체 리터럴
		객체 리터럴은 여러 속성과 기능을 {}로 묶어서 표현한다.


	▶ 객체 기본 구조
		let 객체명 = {
			// ● 프로퍼티 (속성)
			key1 : value1,
			key2 : value2,
			key3 : value3,

			// ● 메서드(익명함수사용)(기능)
			메서드명 : function(매개변수){
				// 실행하는 기능
			}
		}



	▶ 객체 사용
		객체의 프로퍼티에 접근하는 방법은 2가지가 존재한다.

		● 프로퍼티 (속성)
		  1. 객체명 뒤에 .을 사용한다.
		     객체명.key값;  ▶  해당 key값이 가지고 있는 value값을 반환한다.

		  2. 대괄호[] 사용
		     []를 사용하면 key값을 반드시 ''로 감싸줘야한다.
		     객체명['key값'];  ▶  value값을 반환한다.

		● 메서드 (기능)
		  3. 객체명.메서드명();
		     객체명.메서드명(인자값);




