- 배열(Array)
	1. 배열은 여러개의 저장공간을 순차적으로 나열한 구조이다.
	   (여러개의 데이터를 저장하는 저장공간)

	2. 자바스크립트의 배열은 객체이며 여러개의 값을 관리할 수 있는
	   유용한 내장 메서드를 포함하고 있다.

	3. 배열은 Array생성자로 생성된 Array타입의 객체이다.
	4. 배열의 요소로는 원시데이터, ★객체★, 함수, 배열 같은 값으로 인정되는
	   모든 것들이 들어올 수 있다.
	   * 배열의 요소 : 배열이 가지고 있는 하나의 저장공간



	- 배열 생성
	  1. 배열 리터럴 사용
	     let 배열명 = [값1, 값2, 값3,...];
	     let arr1 = [10,20,30,...];

	  2. Array생성자 사용
	     let 배열명 = new Array(5);



	- 배열 요소 접근
	  인덱스 번호 : 배열을 구성하는 요소들에 자동으로 부여되는 고유한 번호
		     0부터 시작하며 맨 앞의 저장공간부터 순차적으로 1씩 증가되면서 부여된다.

		     배열의 요소 접근 : 배열명[인덱스번호]; ▶ 이후에는 변수와 똑같이 사용하면 된다.




- 이벤트(Event)
	웹페이지(웹 문서)상에서 발생한 사건을 의미한다.
	사용자가 버튼을 클릭, 항목을 선택하는 등의 사건을 이벤트라고 부른다.
	이러한 이벤트가 발생하면 자바스크립트 코드가 실행될 수 있도록 구현해서
	사용자와 상호작용할 수 있는 웹페이지를 만들 수 있다.

	
	- 마우스 이벤트
	  1. click	: 요소를 클릭하면 발생하는 사건
	  2. mouseover	: 요소 위에 마우스커서가 올라왔을 때 발생하는 사건
	  3. mouseout	: 요소 위에 마우스커서가 벗어났을 때 발생하는 사건


	- 키보드 이벤트
	  1. keydown	: 키보드를 누르는 동안 발생하는 사건
	  2. keyup	: 키보드를 눌렀다가 땔 때 발생하는 사건
	  3. keypress	: 키보드를 눌렀을 때 발생하는 사건


	- 문서 로딩 이벤트
	  1. load	: 웹 문서가 로딩이 끝나면 발생하는 사건
	  2. unload	: 문서가 벗어날 때 발생하는 사건
	  3. scroll	: 문서가 스크롤되면 발생하는 사건


	- 폼 이벤트
	  1. focus	: 입력요소가 포커스되면 발생하는 사건
	  2. blur	: 입력요소가 포커스를 잃으면 발생하는 사건
	  3. change	: 입력값이 바뀌거나 체크상태가 변경되면 발생하는 사건
	  4. submit	: submit버튼을 누르면 발생하는 사건






- 문서 객체 모델 DOM(Document Object Model)
	웹 문서상에 존재하는 요소들을 객체화 시켜 놓은 것


	- DOM과 이벤트
	  기존의 이벤트 처리 방식은 HTML코드에 자바스크립트 코드를 사용하였다.
	  이런 방식은 코드의 가독성, 유지보수에 좋지 않다.
	
	  DOM을 사용하면, 자바스크립트에서 HTML요소들을 객체로 불러와서 
	  이벤트를 처리할 수 있다.


	- DOM 트리
	  DOM은 웹 문서의 구조와 정보들을 트리(가지가 뻗은 나무)형태로 저장한다.




	- DOM 불러와서 사용
	  DOM에서는 HTML요소들을 선택자를 이용해 접근하는 여러 메서드를 제공한다.
	  ▶ document.메서드();


	- JavaScript에서 Node 가져오기
	  (HTML요소를 자바스크립트 객체로 가져오기)

		1. getElementById("id명");
		   → document.getElementById("id명");		
		     태그의 id속성으로 해당 요소를 가져온다.
		     id속성은 중복을 허용하지 않는 고유한 값이므로
		     ▶ 메서드의 결과는 "객체 1개"이다.


		2. getElementsByClassName("class명");
		   → document.getElementsByClassName("class명");
		     태그의 class속성으로 해당 요소를 가져온다.
		     class는 여러 요소가 같은 이름을 가질 수 있으므로
		     ▶ 메서드의 결과는 "여러 객체를 담은 배열"이다.


		3. querySelector("선택자");
		   querySelector("#아이디명");
		   querySelector(".클래스명");
		   querySelector("태그명");
		   → document.querySelector("선택자");
		     css의 선택자를 활용하여 요소를 가져온다.
		     아이디 선택자/클래스 선택자/태그 선택자  
		     ▶ 상관없이 무조건 처음 나오는 "객체 1개"만 반환한다.
		      

		4. querySelectorAll("선택자");
		   querySelectorAll("#아이디명");
		   querySelectorAll(".클래스명");
		   querySelectorAll("태그명");
		   → document.querySelectorAll("선택자");
		     css의 선택자를 활용하여 요소를 가져온다.
		     ▶ "여러 개의 요소를 가져올 때 사용"한다.
		         객체를 담은 "배열로 반환"한다.




	- 객체요소 생성/삽입/삭제 메서드
		1. createElement("태그명");	: 소괄호에 넘겨준 태그 요소를 만들어준다.
		2. appendChild("태그객체");	: 해당 태그의 자식요소로 삽입하겠다.
		3. removeChild("태그객체");	: 해당 태그의 자식요소중 소괄호에 넘겨준 태그 객체를 삭제하겠다.




	- 요소의 내용 가져오기/수정하기 (부모요소를 잡으면 자식것까지 다 가져온다)
		요소.innerText	: 요소가 가진 내용 중 텍스트만 가져온다.
		요소.innerHTML	: 요소가 가진 내용 중 HTML요소를 포함한 내용을 모두 가져온다.




	- 요소 속성값 가져오기/수정/삭제
		1. 요소.getAttribute("속성명")		: 해당 요소의 특정 속성의 속성값을 반환한다. (태그의 속성값을 가져올때 사용)
							  → document.querySelector("#bg-green").getAttribute("class"); // 클래스 적용된거 클래스명 반환

		2. 요소.setAttribute("속성명","값")	: 해당 요소에 속성과 값을 설정해준다. (기존의 가지고 있던 css style은 없애버린다)
							  → document.querySelector("#bg-red").setAttribute("style","background : red");
							    divBorder[i].setAttribute("style", "border : 2px solid black; border-radius : 10px");

		3. 요소.removeAttribute("속성명")	: 해당 요소의 특정 속성을 삭제한다.




	- HTML요소에 Style적용 하기
		▶ 요소.style.스타일속성명 = "속성값";
		   → document.createElement("div").style.width = "100px";

		   style 속성을 쓰면 기존 style을 없애지 않고 추가해준다.
		   속성명은 css속성명과 동일하다.
		   단, '-'은 사용하지 않고, 다음 단어마다 대문자로 표시해주는 카멜표기법 사용한다.
		    → background-color → backgroundColor
		      list-style-type → listStyleType




	- DOM을 활용한 이벤트 처리
		1. DOM요소에 이벤트 핸들러를 직접 연결시키기
		   이벤트 핸들러	: 이벤트가 발생했을 때 실행시킬 함수가 이벤트 핸들러이다.

		   요소.on이벤트명 = 함수;
		   → 함수가 이벤트 핸들러


		2. addEventListener() 메서드 사용
		   요소.addEventListener(이벤트, 익명함수)

		   - addEventListener방식을 사용하면 하나의 요소에 여러 이벤트를 연결할 수 있으며
		     코드의 가독성도 더 좋다.

		   document.querySelector("#out")("mouseover", function(){
        			// 콜백함수를 받는 메서드
        			this.style.backgroundColor = "red";
		   });





	- 라이트 박스 만들기
		라이트 박스는 여러 사이트에서 많이 사용하는 효과이다.
		작은 이미지를 클릭하면, 큰 이미지를 보여주는 등의 새로운 창을 띄어주는 느낌을 주는 요소를 만들어줄 수 있다.
 				 
		      
	- 모달창 만들기
		- 팝업창과 모달창 차이
		  팝업창	: 현재 페이지에서 새로운 브라우저 창을 열어주는 것
			  브라우저 설정에 따라 팝업창을 막아두는 경우도 있다.
			  최근에는 사용빈도가 떨어졌다.

		  모달창	: 라이트박스를 마치 하나의 팝업창처럼 사용한다.
			  팝업창과 비교했을 때 실제 브라우저 창이 아니라
			  새로운 요소를 띄어준다는 차이점이 있다.





















