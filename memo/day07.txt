- 고급 선택자

- 연결선택자
   1. 하위 선택자
   상위요소 하위요소{
      상위요소를 포함한 모든 하위 요소를 선택한다.
      자식요소를 포함한 모든 자식 요소가 선택된다.
   }

   2. 자식 선택자
   부모요소 > 자식요소{
      부모요소 바로 아래에 속한 자식요소를 선택한다.
   }
   
   3. 인접 형제 선택자
   요소1 + 요소2{
      요소1을 기준으로 바로 다음 형제요소를 선택한다.
   }

   4. 형제 선택자
   요소1 ~ 요소2{
      요소1을 기준으로 다음에오는 모든 형제요소를 선택한다.
   }

- 속성 선택자
   속성이나 속성값까지 지정해서 요소를 선택할수 있다.

선택자[속성명]{

}

선택자[속성명 = "속성값"]{

}
   
- 가상 선택자
   1. 가상 클래스 선택자
   
선택자 : 가상클래스{
   실제 존재하는 요소의 특정 상태에 따라 css를 주고싶을때 사용한다.
}

- 가상클래스의 종류
1. link : href속성을 가진 요소 중 아직 해당 링크를 방문하지 않은 상태
2. visited : href속성을 가진 요소 중 해당 링크를 방문한 상태
3. hover : 사용자가 해당 요소에 마우스 커서를 올린 상태
4. focus : 사용자가 입력 가능한 칸을 선택한 상태
5. nth-child() : 형제 요소중에 순서를 지정해서 선택
6. not(선택자) : 소괄호 안에 작성한 선택자를 제외한 모든 선택자를 선택한다.

- 가상 요소 선택자

선택자 :: 가상요소{
   요소의 특정부분에 원하는 스타일 지정하거나 새로운 요소를 삽입할 수 있다.
}

- 가상 요소 종류
1. first-letter : 요소의 텍스트중 첫글자만 선택한다.
2. first-line : 요소의 텍스트중 첫 줄만 선택한다.
3. before : 선택한 요소의 컨텐츠 앞에 다른 요소를 삽입
4. after : 선택한 요소의 컨텐츠 뒤에 다른 요소를 삽입

** content : "내용" => 내용을가진 새로운 요소를 만들어준다.

- transform
   HTML요소의 크기 조절, 요소 이동, 회전 효과를 나타낼때 사용하는 속성
   
   ** 주의사항 : 요소의 display속성이 block 또는 inline-block이여야 한다.

- transform 관련 함수
1. translate(x,y)
   x,y만큼 요소를 이동시킨다.

2. scale(x,y)
   소괄호안에 넘겨준 x,y값만큼 요소를 확대한다.
   
3. rotate(각도deg)
   넘겨준 각도만큼 요소를 회전시킨다.

- transition 속성
   transform속성은 단순히 요소의 변형만을 수행한다.
   transition속성은 요소를 변형할때 시간을 설정해서 마치 하나의 애니메이션처럼
   표현해줄수 있다. 요소를 완전히 다른 스타일로 변형해줄 수 있다.

- transition 관련 속성
   1. transition-property
   트랜지션을 적용할 요소의 속성을 설정해준다.
   
   all : 해당 요소의 모든 속성에 트랜지션을 적용하겠다.
   none : 아무속성에도 트랜지션을 적용하지 않겠다.
   속성명 : 특정 속성을 선택하여 트랜지션을 적용하겠다.

2. transition-duration : 시간s;
   트랜지션의 진행시간을 설정한다.

3. transition-timing-function
   트랜지션의 진행속도를 설정한다.
   
   ease : 천천히 -> 점점빨리 -> 천천히(기본값)
   linear : 시작부터 끝까지 같은 속도
   ease-in : 느리게 시작
   ease-out : 느리게 종료
   ease-in-out : 느리게 시작해서 느리게 끝내준다.

4. transition-delay : 시간s;
   트랜지션을 바로 실행하지 않고 지연시간을 설정한다.

5. transition : property duration timing-function delay
   간단하게 하나로 설정해줄수 있다.

- animation
   CSS로 애니메이션 만들기위한 속성
   transition속성보다 좀 더 쉽게 상세하게 애니메이션 효과를 설정해줄 수 있다.

- keyframes
   animation의 특정 지점을 설정할수 있는 속성

@keyframes 키프레임 이름{
   선택자{
      스타일 
   }
}

- from, to, percent선택자를 사용해줄수 있다.

- animation 관련 속성
1. animation-name : 키프레임 이름;
   적용시키고싶은 요소에 애니메이션 효과를 지정한다.
   미리 만들어둔 키프레임 이름을 작성한다.

2. animation-duration : 시간s;
   애니메이션이 진행되는 실행시간을 설정한다.

3. animation-iteration-count : 반복횟수, infinite
   애니메이션의 반복횟수를 설정하는 속성
   infinite로 속성값을 넘겨주면 무한히 반복하겠다는 의미

4. animation-delay : 시간s;
   애니메이션의 지연시간을 설정한다.






- 서버와 클라이언트
서버 : 웹페이지로 정보(데이터)를 제공하는쪽(클라이언트가 데이터를 요청하면 응답하는 역할)

클라이언트 : 서버로부터 정보를 제공받는쪽(서버에게 정보를 요청하고 결과를 응답받는 역할)

- form 태그
   1. form태그는 사용자에게 입력받은 데이터를 서버로 전송하는 역할을 한다.
   2. 사용자로부터 입력받는 데이터를 폼데이터, 필드라고 부른다.
   3. form태그는 자식요소로 <input>,<textarea>,<select>태그같은
      입력을 받기위한 태그들을 가진다.

   <form action="데이터를 처리할 서버의 주소" method="get,post"></form>
   action : form태그 내부요소 작성된 입력받은 데이터를 처리할 서버의 주소를 작성한다.
   method : 서버에 데이터를 넘겨주는 방식을 작성한다.

- input 태그
   <input type="입력요소의 타입">
   
   1. 실질적으로 사용자에게 데이터를 입력받는 태그
   2. form태그의 자식요소로 사용해야 input태그로 입력받은 데이터를 서버쪽에 넘겨줄수 있다
   3. type속성의 속성값에 따라 입력받는 형식이 바뀐다.

- type속성에 들어갈 수 있는 속성값
1. text : 텍스트 형태로 사용자에게 입력받는다.
2. password : 사용자로부터 패스워드를 입력받는다.(입력한 데이터가 화면에 보이지 않는다.)
3. date : 년,월,일을 선택하여 입력받는다.
4. submit : 전송 버튼을 만든다.
5. reset : 리셋 버튼을 만든다.(입력한 데이터를 초기화 시킨다.)
6. file : 첨부파일 버튼을 만든다(파일을 입력받을때 사용)
7. hidden : 화면에서는 보이지 않는 입력칸을 만든다.
   주로 name, value속성을 함께 사용한다.

8. radio : 라디오 버튼을 만든다.
      여러 선택지중 하나만 선택할 수 있는 체크박스를 만든다.

9. checkbox : 체크 박스를 만든다.
      여러 선택지중 여러개를 선택할수 있는 체크박스를 만든다.
      라디오,체크박스 속성값들은 주로 name,value속성과 checked속성을 함께 사용한다.

- label 태그
   사용자가 입력하는 input태그에 대한 설명이다.
   for속성을 사용하여 input태그의 id속성값과 매칭시켜줄수있다.

- fieldset, legend
1. fieldset태그 : 여러 label을 묶을 때 사용한다.
2. legend태그 : fieldset에 대한 설명을 작성한다.

- input태그의 주요 속성
1. autofocus 
   페이지 진입 시 해당 요소를 자동으로 focus해준다.
   
2. readonly
   읽기 전용 필드로 설정한다.
   사용자가 입력할 수 없다.

3. disabled
   입력요소를 비활성화 시키는 속성
   value값을 서버에 전송하지 않는다.

4. placeholder 
   input요소에 힌트를 표시한다.
   
5. required
   해당 입력요소를 필수 입력요소로 설정한다(반드시 입력해야하는 요소)
   
6. value
   해당 입력요소가 가지는 실질적인 입력데이터를 의미한다.

7. name
   서버쪽에 데이터를 보낼때 데이터가 무슨 데이터인지 이름을 붙혀서 보낸다.

- textarea 태그
   텍스트를 여러줄 입력받을 수 있는 태그

   <textarea cols="가로너비" rows="세로길이"> </textarea>

   
- select,option 태그
   여러 옵션 중 하나를 선택하는 드롭다운 목록을 만드는 태그

<select>
   <option> 내용1</option>
   <option> 내용2 </option>
   ,...
</select>

** option태그에 value속성을 지정하면 그 속성값이 실질적으로 서버에 넘어가는 데이터다.
 
- button 태그
   버튼을 만드는 태그
   
   <button type="submit , reset , button">내용</button>

- button type의 종류
   1. submit : 서버로 데이터를 전송한다.
   
   2. reset : 입력하고 있는 데이터를 초기화 한다.

   3. button : 딱히 기능이 없이 버튼만 만든다.
       주로 javaScript와 함께 쓰인다.  



- 반응형 웹
   사용자의 화면크기(뷰포트)에 맞춰서 반응하는 웹페이지
   보여지는 화면의 크기에 맞춰서 요소를 재배치하고 다시 표현하는것

- viewport(뷰포트)
   사용자 기기에서 실제 내용이 표시되는 화면 영역이다.
   pc와 모바일의 뷰포트는 크기가 다르기 때문에 그에 맞는 반응형 웹을 보여줘야한다.

- 뷰포트 단위
   뷰포트에 반응하는 단위를 의미한다.
   
   1. vw(view width) : 뷰포트 너비의 퍼센트
   100vw => 뷰포트 너비의 100퍼센트를 차지한다.

   2. vh(view height) : 뷰포트 높이의 퍼센트
   20vh => 뷰포트 높이의 20퍼센트를 차지하겠다.



- 미디어 쿼리
   1. 반응형 웹을 만들기 위한 가장 기본적인 방법이다.
      사용자의 뷰포트 크기에따라 다른 CSS를 적용해줄 수 있다.

   2. @media속성을 사용하여 특정 뷰포트에 어떤 CSS를 적용시킬지 설정할 수 있다.

- 미디어 쿼리 구조
@media 미디어 유형 (조건) and(조건){
   선택자{
      속성명 : 속성값;
      ,...
   }   
}
1. 미디어 유형 : all 또는 screen을 사용할 수 있다.
   all : 어떤 디바이스 유형이든 다 적용하겠다.(기본값)
   screen : pc와 모바일 유형만 적용하겠다.

   ** 주로 생략

2. and : 여러 조건을 한꺼번에 주고 싶을 때 사용한다.