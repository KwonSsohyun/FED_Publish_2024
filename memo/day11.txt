- 영역이름으로 그리드 배치 : grid-template-ares 속성
	그리드 아이템에 이름을 붙히고 그리드 컨테이너에서 해당 이름을 이용해
	배치할 수 있는 속성
	
	1. 각 grid-item요소에 grid-area속성을 이용해서 영역 이름을 설정한다.
	2. grid-container에 grid-template-areas 속성으로 
	   각 item들의 이름으로 레이아웃을 배치할 수 있다.


- grid-template-areas 규칙
	1. 그리드로 이루어진 전체 셀을 그리드 아이템으로 채워준다.
	2. 한줄의 큰따옴표는 ""하나의 행을 의미한다.
	3. 한줄의 큰따옴표 안에서 사용한 각각의 grid-area이름이 하나의 열을 의미한다.
	   "item1 item2 item3"
	   "item1 item2 ." => 2행 3열로 이루어진 그리드
	4. 여러개의 셀을 합치려면 grid-area이름을 반복한다.
	5. 셀을 비우고 싶다면 .을 사용한다.
	6. 영역은 반드시 직사각형, 정사각형 형태여야 한다.



- Box-shadow속성
	div같은 박스요소에 그림자 효과를 나타낼 수 있는 속성

- 속성값
	box-shadow : 박스와 그림자간의 x축거리 (양수:오른쪽, 음수:왼쪽)
		     박스와 그림자간의 y축거리 (양수:아래, 음수:위)
		     그림자 흐림 정도 (음수:사용불가)
		     그림자 확대 정도 (양수:그림자 확대, 음수:그림자 축소)
		     그림자 색상 



- background-image 속성
	요소에 배경이미지를 지정할 수 있는 속성
	
	background-image : url(불러오고싶은 이미지의 경로);
	** 이미지의 크기가 요소보다 작다면 이미지가 요소를 채울 때까지 반복해서 나온다.

- background-image 관련 속성
	1. background-repeat : no-repeat; => 배경 이미지를 반복하지 않겠다.
	2. background-size : cover; => 배경이미지가 부모요소보다 작을 때 부모요소만큼 채운다.
			     100% 100% => 백분율 단위를 사용해 배경사진이
					  부모요소의 몇퍼센트를 차지할건지 지정한다.
					  (가로% 세로%)




- 자바스크립트(JavaScript)
	객체기반의 스크립트 언어
	HTML : 웹페이지의 내용(컨텐츠) 정의
	CSS : 요소의 스타일 정의
	JavaScript : 웹페이지의 동적인 동작(기능)을 구현

- 자바스크립트 특징
	1. 퍼즐 조각처럼 코드형태로 html페이지에 내장된다.
	2. 컴파일 과정 없이 브라우저 내부의 자바스크립트 처리기(인터프리터)에 의해 실행된다.
	   브라우저 : Chrome, Safari
	   모든 브라우저는 자바스크립트를 실행할 수 있는 자바스크립트 엔진을 가지고 있다.

	처음에는 자바스크립트를 웹페이지의 html요소들을 제어하려는 목적으로 만들어졌으며
	자바스크립트가 발전함에 따라 사용자의 행위에 따라 
	반응할 수 있는 웹페이지를 만들 수 있게 되었다.

- 자바와 자바스크립트 
	직접적인 관련은 없다.
	문법상 비슷한 부분이 많은데 둘 다 C언어를 기반으로 만들어져서 그렇다.

- 웹페이지에서 자바스크립트의 역할
	웹페이지는 3가지 코드(html,css,javaScript)가 결합되어 만들어진다.
	자바스크립트는 사용자의 입력을 처리하거나 웹어플리케이션을 제어하는 등의
	웹페이지의 동적 제어에 사용된다.

	장점 : 웹페이지 반응성 향상
	      효율적인 데이터 전송
	      사용자와 상호작용할 수 있는 다양한 기능


- Node.js 설치 
	JavaScript가 웹브라우저 없이도 작동할 수 있는 환경을 제공한다.
	(Ctrl+F5 - VS코드 디버그콘솔 실행 단축키)
	
- Code Runner 확장프로그램 설치(VS코드)
	Ctrl+Alt+N - VS코드 출력 실행 단축키



- JavaScript 기본 문법
	1. 출력 함수
	   console.log() => 자바스크립트가 가지고 있는 명령어
			    소괄호 안에 작성한 데이터를 콘솔창에 출력해준다.
			    , 로 구분해서 여러 데이터를 함께 작성할 수도 있다.

	2. 세미콜론 ;
	   자바스크립트에서 세미콜론은 하나의 명령어가 끝났다.
	
	3. 콘솔창(출력창, 디버깅 콘솔창)
	   개발자와 컴퓨터가 소통하기 위한 창
	   주로 개발자가 코드의 문제를 확인하는 용도로 사용한다.
	   내 코드의 결과를 확인하는 용도로 사용한다.

	4. 큰따옴표 "", 작은따옴표 ''
	   컴퓨터가 해당 데이터가 문자열 데이터임을 구분하기 위해 사용한다.
	   (문자열 : 문자들의 나열)
	   10(숫자), "10"(문자열) : 숫자는 연산이 가능하지만, 문자는 연산이 불가능
	  
	5. ``(백틱) : 문자열 데이터임을 나타낸다. (Tab키 위에 있음)
		     문자열 중간에 enter을 치면 줄바꿈까지 포함하여 하나의 문자열로 본다.

	6. 주석(Comment)
	   한줄 주석 : //
	   여러줄 주석 : /* */ => CSS주석과 동일



- 변수(Variable)
	- 변수(Variable)
	  어떠한 데이터를 저장할 수 있는 저장공간

	- 변수를 만드는 방법(변수의 선언)
	  자바스크립트에서 변수를 만들 때는 let, var라는 키워드를 사용한다.
	  let 변수명;
	  var 변수명;

	  let name;
	  var number;
	  ** 변수명은 개발자 마음대로 작성하면 된다.

	- 변수에 데이터를 저장하는 방법(변수 초기화)
	  변수명 = 데이터;

	  name = "홍길동";
	  number = 100;

	- 변수선언과 동시에 데이터초기화
	  let 변수명 = 데이터;
	  var 변수명 = 데이터;

	  let name = "권소현";
	  var number = 200;

	- 변수안에 저장된 데이터 사용
	  변수(저장공간) 안에 저장된 데이터를 사용하려면
	  데이터가 필요한 곳에 변수이름을 작성하면 된다.
	  
	  ex) console.log(name);  => 권소현 

	- 여러개의 변수를 한꺼번에 선언하는 방법
	  let 변수명1, 변수명2, 변수명3,...;


	- 변수를 사용하는 이유
	  1. 데이터를 쉽게 재사용하기 위함
	  2. 데이터에 의미를 부여하기 위함(데이터의 이름을 붙혀준다.)



- 상수(Constant)
	1. 값을 한번 저장하면 이후에 수정할 수 없는 저장공간이다.
	2. const 라는 키워드를 사용한다.
	3. 상수명은 이름을 전부 대문자로 지어주는 것이 관례이다.(변수이름과 구분짓기 위해)

	- 상수 선언 문법
	  const 상수명 = 값;

	  const NAME = "권소현";



- JavaScript 변수 작명 규칙
	1. 띄어쓰기(공백) 사용불가 => 변수이름이 길어졌을 때 가독성이 떨어진다.
	   userphonenumber
	   
	   *표기법
	    user_phone_number : 스네이크 표기법, 팟홀 표기법
	    userPhoneNumber : 카멜 표기법

	2. 특수문자 사용불가 (_와 $만 사용가능)
	3. 숫자로 시작할 수 없다.
	   let 1number;
	4. 키워드는 사용할 수 없다.
	   키워드(예약어) : 이미 자바스크립트에서 역할이 부여된 단어
	5. 왠만하면 데이터를 의미할 수 있는 단어를 사용하는 것이 좋다.
	6. 왠만하면 소문자로 시작해야한다. (변수명과 클래스이름을 구분짓기 위함)



- JavaScript 자료형(Data Type)
	데이터의 종류

	1. number : 정수, 실수 구분없는 숫자 데이터
		    연산 가능
		    infinity(무한), NaN(Not a Number)이라는 특별한 값도
		    number타입에 포함된다.

	2. string : 문자열
		    0개 이상의 문자 데이터
		    데이터가 문자열임을 나타낼 때는 "", '', `` 을 사용한다.

	3. boolean : true(참), false(거짓)
	4. undefined : 정의되지 않은 데이터
		       값이 없음을 나타내는 값
	5. null : 값이 없음을 나타내는 값
		  개발자가 의도적으로 값이 없음을 나타내는 값
	

- typeof 키워드
	키워드 뒤에 작성한 데이터가 어떤 타입인지 반환해주는 키워드


- 객체 타입(Object Type)
	자바스크립트를 구성하는 거의 모든 것들이 객체이다.
	object : 객체 타입
	

- 템플릿 문자열
	문자열을 조금 더 간편하게 다른 값들과 묶어줄 수 있는 방법
	백틱을 사용한다.
	`${변수명}`



- 호이스팅(Hoisting)
	자바스크립트 변수,함수 등 
	모든 선언문은 코드 실행 단계 이전에 먼저 메모리상에서 공간을 확보한다.

	var 키워드로 변수를 만들면 호이스팅과 동시에 undefined로 초기화 시킨다.
	let 키워드로 변수를 만들면 호이스팅이 되지만 어떠한 값으로도 초기화 시키지 않는다.
	
	** 왠만하면 let키워드로 변수를 선언하는 것이 좋다.








