- 자바스크립트(JavaScript)
	객체 기반으로 스크립트 언어
	HTML : 웹페이지의 내용 정의
	CSS : 요소의 스타일 정의
	js : 웹페이지의 동적인 동작을 구현한다.

- 자바스크립트 특징
	1. 퍼즐 조각처럼 코드형태로 html페이지에 내장된다.
	2. 컴파일 과정없이 브라우저 내부의 자바스크립트 처리기에 의해 실행된다.

	모든 브라우저는 자바스크립트 실행할 수 있는 자바스크립트 엔진을 가지고 있다.



- 변수(Variable)
	어떠한 데이터를 저장할 수 있는 저장공간
	하나의 데이터를 저장할 수 있는 저장공간

- 변수의 선언
	let 변수명;
	var 변수명;

	** 변수명은 개발자 마음대로 지어주면 된다.

- 변수 초기화
	변수명 = 데이터;
	
- 변수선언과 동시에 초기화
	let 변수명 = 데이터;
	var 변수명 = 데이터;

- 변수안에 저장된 데이터 사용
	변수안에 저장된 데이터를 사용하려면
	데이터가 필요한 곳에 변수명을 작성한다.

	ex) console.log(변수명); => 변수명 안에 저장된 값 출력

- 여러개의 변수를 한꺼번에 선언하는 방법
	let 변수명1, 변수명2, 변수명3,...;

- 변수를 사용하는 이유
	1. 데이터를 쉽게 재사용할 수 있다.
	2. 데이터에 이름을 붙혀줄 수 있다.



- 상수(Constant)
	1. 값을 한번 저장하면 이후에 저장된 값을 수정할 수 없는 저장공간
	2. const 키워드를 사용한다.
	3. 상수 이름은 전부 대문자로 지어주는 것이 관례이다.(변수 이름과 구분짓기 위해)

- 상수 선언 문법
	const 상수명 = 데이터;



- 자료형(Data Type) : 값의 종류
	1. number : 숫자 데이터(정수,실수 구분없이 숫자타입으로 통일)
		    산술적인 연산이 가능하다.
		    infinity(무한), NaN(Not a Number)이라는 특별한 값들도 number타입

	2. string : 문자열 데이터
		    문자열 : 0개 이상의 문자 데이터
		    데이터가 문자열임을 나타낼 때는 "",'',``으로 데이터를 감싸준다.
		    "" => string 타입의 데이터

	3. boolean : 논리형 데이터
		     true, false => 참과 거짓을 나타내는 값

	4. undefined : 정의되지 않은 데이터
		       값이 없음을 나타내는 값

	5. null : 개발자가 의도적으로 값이 없음을 나타내는 값



- 객체 타입(Object Type)
	object : 객체 타입
		 자바스크립트를 구성하는 거의 모든 것들이 객체이다.



- typeof 키워드
	typeof 값 => 해당 값이 어떤 타입인지 반환한다.



- 템플릿 문자열
	문자열을 좀 더 간편하게 다른 값들과 묶어줄 수 있는 문법
	백틱(``)을 사용한다.

	ex) `제 이름은 ${변수명} 입니다.`


- 호이스팅(Hoisting)
	자바스크립트의 변수, 함수 등 모든 선언문은 
	코드를 실행하는 단계이전에
	메모리상에서 공간을 확보한다. <= 호이스팅

	var 키워드로 변수를 만들면 호이스팅과 동시에 undefined로 초기화 시킨다.
	let 키워드로 변수를 만들면 호이스팅이 되지만 어떠한 값으로도 초기화 시키지 않는다.

	console.log(name); 
	var name = "권소현"; // undefined
	let name = "권소현"; // 오류

	** 왠만하면 var키워드 보다는
	   let키워드로 변수를 선언하는 것이 좋다.
	




- 제어문자(Escape Character)
	문자열 안에서 사용되는 미리 예약된 특수한 기능을 하는 문자
	\(역슬래시)를 사용하여 제어문자를 표현해줄 수 있다.

- 제어문자 종류
	1. \n		: 문자열 안에서 줄바꿈을 해주는 제어문자
	2. \t		: 문자열 안에서 일정 간격(tab)을 띄어주는 제어문자
	3. \", \'	: 문자열 안에서 큰따옴표, 작은따옴표를 표현해주는 제어문자
	4. \\		: 문자열 안에서 역슬래시를 표현해주는 제어문자

	** 제어문자들도 전부 하나의 문자열 데이터이다. => 데이터분석, \n,\t => 없애야한다.



- 형변환(Type Casting)
	1. 데이터의 자료형을 다른 자료형으로 변환할 수 있는 문법
	2. js에서 형변환은 강제형변환, 자동형변환 2가지로 분류된다.

- 강제 형변환(명시적 형변환)
	개발자가 직접 데이터의 자료형을 변환하는 것
	자바스크립트가 가진 형변환 함수를 사용해야한다.
	형변환 함수 => 형변환 해주는 기능

	1. Number() : 소괄호 안에 넘겨준 데이터를 정수형 데이터로 변환해준다.
		      단, 넘겨주는 데이터가 정수로 변환이 가능한 데이터여야한다.
		      ex) "문자열" - X

	2. Boolean() : 소괄호 안에 넘겨준 데이터를 논리형 데이터로 변환해준다.
		       참(true) : false를 제외한 모든 값
		       거짓(false) : 0, 0.0, '', ""

	3. String() : 소괄호 안에 넘겨준 데이터를 문자열 데이터로 변환해준다.



- 자동 형변환(암묵적 형변환)
	자바스크립트 엔진이 필요에 따라 자동으로 데이터의 자료형을 바꿔준다.

	- 자동 형변환이 가능한 경우
	  1. string + 다른 타입의 값 => string
	  2. 다른타입의 값 * 문자열 => number
	  3. boolean + number => number
	  4. boolean * number => number




- document.write() 함수(기능)
	자바스크립트로 웹문서에 데이터를 출력시키고 싶을때 사용하는 기능

	** document : document객체로써 document는 웹 문서를 의미한다.
		      * 웹페이지에 존재하는 HTML요소에 접근하고자 할때는
		        반드시 Document 객체를 사용해야한다.

			let container = document.getElementsByClassName(".container");




- with문
	객체가 가진 기능이나 속성을 참조하기 위해 사용한다.
	주어진 객체의 속성이나 기능을 with문의 영역을 통해서 간편하게 다뤄줄 수 있다.

	with(document){
		// {} → 영역
		// document객체가 가진 기능들을 document. 을 사용하지 않고 간단하게 사용할 수 있다.
	}




- prompt() 함수
	웹문서 상에서 문자열을 입력받을 때 사용하는 함수
	prompt()함수로 웹문서에서 입력받은 데이터를 변수에 담아서 사용할 수 있다.

	let 변수명 = prompt("출력해주고싶은 문자열");




- alert(), confirm()
	웹페이지에서 사용자와 상호작용하기 위해 사용되는 간단한 대화상자를 만든다.

	1. alert() : 단순한 정보를 사용자에게 표시하기 위해 사용된다.
		     사용자가 확인버튼을 클릭하기 전까지는 아무 작업도 할 수 없다.

	2. confirm() : 사용자에게 "예" or "아니오" 선택지를 제공하는 대화상자
		       confirm()함수는 사용자가 "예"를 선택하면 true값을 반환한다.
		                     사용자가 "아니오" 선택하면 false값을 반환한다.




- 연산자(Operator)
	특수한 기능을 하는 문자

	- 연산자의 우선순위
		하나의 수식 안에서 어떠한 연산자가 먼저 실행될건지 우선순위가 정해져있다.
		ex) 10+20 이면 10,20이 항(피연산자)를 뜻함

		최 - 최우선 연산자, (), .(닷 연산자)
		단 - 단항 연산자 : 연산자를 기준으로 항(피연산자)이 한개인 연산자 => 양수,음수
		산 - 산술 연산자
		쉬 - 쉬프트 연산자(비트 연산자)
		관 - 관계 연산자(비교 연산자)
		논 - 논리 연산자
		삼 - 삼항 연산자
		대 - 대입 연산자, = : 오른쪽에 있는 값을 왼쪽 저장공간에 대입한다.
				   let num1 = 10 + 10;



	- 산술 연산자
		산술적인 연산을 진행할 때 사용하는 연산자
		+ : 덧셈
		    문자와 문자간의 덧셈은 데이터를 연결하고
		    숫자와 숫자간의 덧셈은 산술연산을 진행한다.
		- : 빼기
		* : 곱하기
		/ : 나누기
		% : 나머지

	
	- 관계 연산자
		값들을 비교할 때 사용하는 연산자
		10 > 20 ▶ false => 연산을 하고 결과를 true,false 반환한다.
		(조건식) 결과를 true,false로 반환하는 식

		>	: 왼쪽에 있는 값이 오른쪽에 있는 값보다 크다(초과)
		>=	: 왼쪽에 있는 값이 오른쪽에 있는 값보다 크거나 같다(이상)
		<	: 왼쪽에 있는 값이 오른쪽에 있는 값보다 작다(미만)
		<=	: 왼쪽에 있는 값이 오른쪽에 있는 값보다 작거나 같다(이하)

		==	: 왼쪽에 있는 값과 오른쪽에 있는 값이 같다(타입 검사 X)
		!=	: 왼쪽에 있는 값과 오른쪽에 있는 값이 같지 않다(타입 검사 X)

		===	: 왼쪽에 있는 값과 오른쪽에 있는 값이 같다(타입 검사 O)
		!==	: 왼쪽에 있는 값과 오른쪽에 있는 값이 같지 않다(타입 검사 O)


	- 논리 연산자
		여러개의 조건식을 연결하거나 조건식의 결과를 반전시킬 때 사용하는 연산자

		&&(And) : 조건식1 && 조건식2 ▶ 두 조건식이 모두 true를 반환해야 결과가 true
					    연결한 조건식 중 하나라도 false를 반환하면 결과가 false이다.

		|| (Or) : 조건식1 || 조건식2 ▶ 두 조건식 중 하나라도 true를 반환하면 결과가 true
					    연결한 조건식이 모두 false를 반환해야 결과가 false이다.

		! (Not) : !조건식 ▶ 조건식이 true라면 false로 바꾼다.
				   조건식이 false라면 true로 바꾼다.


	- 삼항 연산자
		JavaScript에서 3개의 피연산자를 받는 유일한 연산자
		조건식 ? 조건식이 참일 때 반환할 값 : 조건식이 거짓일때 반환할 값
		비?집:놀이동산

		** 조건식을 기준으로 true를 반환한다면 콜론(:)을 기준으로 왼쪽에 있는 값이 반환된다.
		   조건식이 false를 반환한다면 콜론(:)을 기준으로 오른쪽에 있는 값이 반환된다.


	- 대입 연산자
		= : 오른쪽에 있는 값을 왼쪽의 저장공간에 대입해준다.
		

	- 복합 대입 연산자
		+= : 오른쪽에 있는 값을 왼쪽의 저장공간에 더하고 대입해준다.
		     let number = 10;
		     number += 20; ▶ number = number + 20; (30)

		-= : 오른쪽에 있는 값을 왼쪽의 저장공간으로부터 빼고나서 대입해준다.
		     let number = 100;
		     number -= 20; ▶ number = number - 20; (80)

		*= : 오른쪽에 있는 값을 왼쪽의 저장공간에 곱하고 다시 대입한다.
		/= : 오른쪽에 있는 값을 왼쪽의 저장공간으로부터 나누고 다시 대입한다.
		%= : 오른쪽에 있는 값을 왼쪽의 저장공간으로부터 나눈 나머지를 다시 대입한다.	




- parseInt() : 소괄호 안에 들어온 데이터를 정수로 바꿔준다.


- 조건식
	결과를 true,false로 반환하는 식
















