- 함수(Function)
	어떠한 기능을 수행하는 코드들을 하나의 이름으로 저장해놓은 것

	- 함수 정의
	  function 함수명(매개변수){
		// 해당 함수를 사용했을 때 실행할 코드 ← 함수의 기능
		return 반환값;
	  }

	  1. function 	: 이제부터 함수를 정의하겠다라는 의미의 키워드
	  2. 함수명 	: 변수명처럼 마음대로 작성하되 동사로 작성하는 것이 좋다.
	  3. 매개변수 	: 함수가 기능을 수행하는데 외부로부터 어떠한 값을 받아와야한다면
		      	  값을 받아올 변수를 선언해준다.
		      	  넘겨받을 데이터가 여러개라면 매개변수도 여러개 선언할 수 있다.
			  넘겨받을 데이터가 없다면 생략도 가능하다.
	  4. 실행할 문장 	: 해당 함수를 실행했을 때 실행될 코드를 작성한다.
			  해당 함수를 호출하면 함수 영역안의 코드를 위에서부터 아래로 차례대로 실행한다.
	  5. return 반환값 : 함수가 어떠한 기능을 수행하고 나서 이 함수를 사용한 쪽에 돌려줄 값이 있다면
			   return 키워드 옆에 반환값으로 작성한다.
			   함수가 어떠한 기능을 수행하고 나서 함수를 사용한 쪽에 돌려줄 값이 없다면
			   return 자체를 생략 가능하다.
			   * return이 있는 함수는 함수를 호출한 부분 자체를 하나의 값으로 본다.
			     return이 없는 함수는 값이 아니라 그냥 어떠한 기능만 수행하는 함수이다. 


	- 인수/인자, 매개변수
	  인수/인자	: 함수를 호출할 때 함수쪽에 넘겨주는 데이터	▶ 함수를 호출하는 쪽에서 사용
	  매개변수		: 인수/인자값을 받아오는 변수			▶ 함수를 정의하는 쪽에서 사용






- 익명 함수
	이름이 없는 함수이며 변수에 저장해서 사용할 수 있다.
	주로 1회성으로 사용할 기능을 익명함수로 만들어준다.

	let 변수명 = function (매개변수){
		// 기능을 수행하는 코드
		return 반환값;
	}
	


- 화살표 함수
	익명함수를 간편하게 사용할 수 있는 문법

	- 화살표 함수 문법
	  1. function 키워드를 생략한다.
	  2. 소괄호 옆에 화살표 => 를 작성한다.
	  3. 매개변수가 한개라면 소괄호도 생략가능하다.
	  4. 실행할 문장이 한문장인 경우 중괄호도 생략가능하다.
	     단 return이 있다면 중괄호 생략불가
	  5. 실행할 문장이 한문장인데 return 반환값이 있는 경우
	     중괄호와 return 반환값을 같이 생략할 수 있다.





- 객체(Object)
	실제로 존재하는 사물이나 개념
	객체는 그 객체를 이루는 속성과 기능을 가진 것
	객체를 이루는 데이터와 함수를 모아둔 것
	


	- JavaScript에서의 객체
	  1. 자바스크립트는 객체기반의 스크립트 언어이며
	     자바스크립트를 이루고 있는 거의 모든 것들이 객체이다.
	  2. 원시타입(number,string)의 데이터 외의 모든 데이터의 타입은 객체(object)타입이다.
	  3. 객체는 그 객체를 이루는 속성과 기능으로 이루어져 있다.
	     ● 프로퍼티(Property)	: 키값으로 이름으로 구별하고, 해당 키값과 value값으로
				  구성되어있는것이 프로퍼티이다.

	     ● 키(key)		: 어떠한 집합에서 특정한 값을 찾아내기 위해 다른 값들과 비교하는 값

	  4. 프로퍼티는 key값과 value값으로 이루어져 있으며 
	     프로퍼티의 value값 자리에 함수를 정의할 수 있다.
	 		
	  5. 프로퍼티의 value값이 함수인 경우 일반 함수와 구분짓기 위해서
	     "메서드" 용어라고 부른다.



	- 객체 생성
	  자바스크립트는 다양한 방법을 통해 객체를 만들 수 있다.

	  ▶ 객체 리터럴 방식
	     여러 속성과 기능을 {}로 묶어서 표현할 수 있다.

	     let 객체명 = {
		// 프로퍼티 정의
		key1값 : value값1,
		key2값 : value값2,
		key3값 : value값3,		
		메서드명 : function(매개변수){   // 익명함수로 작성
			// 실행할 코드
		}			
	     }



	- 객체의 사용
	  객체의 프로퍼티에 접근하는 방식은 2가지가 존재한다.

	  1. 객체명뒤에 .을 사용한다.
	     <속성접근>
	     ▶ 객체명.key값	// 해당 key값이 가지고 있는 value값을 반환한다.
	        console.log(객체명.key값);		// value값1 반환

	     <기능접근>	  
	     ▶ 객체명.메서드명(인자값);


	  2. []를 사용한다.
	     []를 사용하면 key값을 반드시 ''로 감싸줘야한다.
	     ▶ 객체명['key값'];	// value값을 반환



	- 만들어놓은 객체에 프로퍼티 추가/삭제
	  객체를 생성하고 이후에 객체 내부의 프로퍼티를 추가하거나 삭제하는 것이 가능하다.
	  
	  1. 프로퍼티 추가
	     객체에 존재하지 않는 키값에 value값을 저장한다.

	  2. 프로퍼티 삭제
	     프로퍼티에 저장된 value값 삭제
	     프로퍼티를 꺼내와서 앞에 delete키워드를 붙혀준다.
	     delete 키워드를 사용한다.



	- Object() 생성자를 사용한 객체생성
	  let 객체명 = new Object();	// 비어있는 객체를 만들겠다.







- 콜백함수(Callback) 
	→ 인자값으로 함수를 받아오는 경우가 있다.
	  인자값을 넘겨줄 때 익명함수로 기능을 구현해서 넘겨준다.

	1. 자바스크립트에서는 함수를 값으로 취급하기 때문에 매개변수로 전달이 가능하고
	   함수를 리턴할 수도 있다.

	2. ★ 함수의 "매개변수로 전달되는 함수"를 "콜백함수"라고 부른다.





- 배열(Array)
	저장공간의 나열

	1. 배열은 여러개의 데이터를 순차적으로 나열한 자료구조이다.
	   (여러개의 값을 저장해줄 수 있는 저장공간)

	2. 자바스크립트의 배열은 객체이며, 여러개의 값을 관리할 수 있는 유용한 내장 메서드를 포함하고 있다.
	3. 배열은 Array생성자로 생성된 Array타입의 객체이다.
	4. 배열의 요소로는 원시데이터, 객체, 함수, 배열같은 값으로 인정되는 모든 것들이 들어올 수 있다.
	   배열의 요소	: 배열이 가지고 있는 각각의 저장공간


	
	- 배열 생성
	  1. 배열 리터럴 사용
	     0개 이상의 값을 쉼표로 구분하여 대괄호[]로 묶어서 만들어준다.
	     → 만듬과 동시에 초기값을 넣어줄 수 있다.

	     ▶ let 배열명 = [값1, 값2, 값3,...];
		let arr = [10, 20, 30];



	  2. Array 생성자 사용
	     Array 생성자를 사용하면 0개 이상의 값이 들어갈 수 있는 배열을 생성할 수 있다.
	     → 몇칸짜리 저장공간만 만드는 것이다.

	     ▶ let 배열명 = new Array(칸수);
		let arr2 = new Array(5);



	- 배열의 요소 접근
	  인덱스 번호	: 배열을 구성하는 요소들에 자동으로 부여되는 고유한 번호
			  0부터 시작하며 맨 앞의 요소부터 순차적으로 1씩 증가되며 부여된다.

			  배열의 요소에 접근하기 위해서는 인덱스 번호를 사용하면 된다.
			  ▶ 배열명[인덱스번호];



	- 배열의 요소 추가/삭제
	  1. 배열에 요소 추가
	     인덱스를 사용하여 필요한 위치에 값을 할당하면 된다.

	  2. 배열에 요소 삭제
	     delete키워드를 사용하여 배열 요소안에 있는 값을 삭제할 수 있다.
	     이때 배열의 길이에는 변함이 없다.



	- 배열의 메서드
	  1. push(값)		: 배열의 마지막 요소에 인자로 넘겨준 값을 추가해주는 메서드
	  2. unshift(값)		: 배열의 가장 앞부분에 값을 삽입해주는 메서드
	  3. pop() 		: 배열의 가장 마지막 요소를 삭제
	  4. shift()		: 배열의 가장 첫번째 요소를 삭제

	  5. splice(index, 제거할 요소개수, 배열에 추가될요소)	
	     : 배열의 특정위치에 요소를 추가하거나 특정위치의 요소를 삭제하는 메서드

	  6. concat(배열)	: 현재 배열과 인자값으로 넘겨받은 배열을 병합하고 나온 복사본의 배열을 반환한다.
	  7. indexOf(값)		: 넘겨준 값이 존재하는 인덱스 번호를 반환한다.
	  8. reverse()		: 배열요소의 순서를 거꾸로 뒤집어준다.
	  9. sort()		: 배열의 요소를 오름차순으로 정렬한다.





- 이벤트(Event)
	웹페이지상에서 발생한 사건을 의미한다.
	사용자가 버튼을 클릭하거나 항목을 선택하는 등의 사건을 이벤트라고 부른다.
	이러한 이벤트가 발생하면 자바스크립트의 코드가 실행될 수 있도록 구현하여
	사용자와 상호작용할 수 있는 웹페이지를 만들 수 있다.


	- 마우스 이벤트
	  1. click	: 요소를 클릭하면 발생하는 사건
	  2. mouseover	: 요소 위에 마우스 커서가 올라왔을 때 발생하는 사건
	  3. mouseout	: 요소 위에 마우스 커서가 벗어났을 때 발생하는 사건



	- 키보드 이벤트
	  1. keydown	: 키보드를 누르는 동안 발생
	  2. keyup	: 키보드를 눌렀다가 땔 때 발생
	  3. keypress	: 키보드를 눌렀을 때 발생

	

	- 문서 로딩 이벤트
	  1. load	: 웹 문서가 로딩이 끝나면 발생
	  2. unload	: 문서를 벗어날 때 발생
	  3. scroll	: 문서가 스크롤되면 발생



	- 폼 이벤트
	  입력이 가능한 요소의 이벤트
	  1. focus	: 해당 폼 입력요소에 포커스가 되면 발생
	  2. blur	: 해당 폼 입력요소에 포커스를 잃으면 발생
	  3. change	: 입력값이 바뀌거나 체크상태가 변경되면 발생
	  4. submit	: submit 버튼을 누르면 발생

















