- css 우선순위
   동일한 요소에 동일한 CSS를 적용 시켰을 때 어떤 CSS가 적용되는지 우선순위가 있다.

   1. CSS 속성값뒤에 !important를 붙힌 경우
   2. 요소에 인라인 스타일로 CSS를 설정한 경우
   3. 선택자로 id선택자를 사용한 경우
   4. 선택자로 class선택자를 선택한 경우
   5. 선택자로 태그선택자를 사용한 경우

   ** 우선순위가 같은 경우에 CSS를 다르게 입혔다면 더 상세하게 작성한 선택자가 적용된다.
      선택자도 동일하다면 나중에 작성한 CSS가 적용된다.

   ** 인라인 스타일, !important는 최대한 사용하지 않는게 좋다 => 코드가 복잡
   

- 구체성 점수
   태그 선택자 : +1
   클래스 선택자 : +10
   아이디 선택자 : +100




- 그리드 (Grid)
   1. CSS의 그리드 레이아웃은 웹페이지의 레이아웃을 잡기위한 2차원 레이아웃 시스템 (행,열)
   2. 행과 열로 이루어진 2차원 구조로 레이아웃을 잡을 수 있다.
   3. 페이지에서 페이지로 이동할때 요소의 높이나 너비가 바뀌지 않는다면
      웹페이지의 일관성을 높힐수 있다.

   4. 컨텐츠를 행과 열로 배치할 수 있으며 복잡한 레이아웃을 
      직관적으로 구축할수 있는 여러가지 속성들이 있다.


- flex box와 grid의 차이점
   1. flex box는 한방향 레이아웃 시스템 (1차원)
   2. grid는 두 방향(행,열) 레이아웃 시스템(2차원)


- Grid 구성
   1. grid container
      grid 레이아웃을 배치하려는 요소들을 담고있는 부모요소

   2. grid item
      grid container의 자식요소로 실질적으로 배치하고 싶은 요소
   
   3. column
      grid container의 열(가로) 방향 배치

   4. row
      grid container의 행(세로) 방향 배치

   5. gutter
      행이나 열 사이의 공백(간격)



- Grid Container 만들기
   grid 레이아웃을 만들 부모요소에 display:grid 속성을 지정한다.

- Grid Container의 주요 속성
   1. display : grid
      grid-container를 지정하는 속성

   2. grid-template-columns : 1열크기 2열크기,..
      길이나 백분율 단위를 이용해서 각각의 열을 배치하는 속성
      열마다 길이를 다르게 설정할 수 있다.

   3. grid-template-rows : 1행크기 2행크기,...
      길이나 백분율 단위를 이용해서 각각의 행을 배치하는 속성
      행마다 길이를 다르게 지정할 수 있다.

   4. column-gap : 열과 열사이의 간격

   5. row-gap : 행과 행사이의 간격

   6. gap : 행열간의간격
      gap : 행(세로)간의간격 열(가로)간의간격



- Grid Item 라인 기반 배치
	그리드 아이템을 배치할 때 그리드 선의 "시작위치"와 "끝 위치"를 지정할 수 있다.
	라인 기반 배치를 하려면 라인숫자를 지정하거나 span 키워드를 사용한다.

	1. 라인 숫자는 열 기준으로 왼쪽부터는 1, 오른쪽부터는 -1로 시작
	2. 행 기준으로는 위부터 1, 아래부터 -1로 시작

- 라인 기반 배치 속성 (그리드 아이템)
	1. grid-column-start : 배치를 시작할 열의 라인을 선택
	2. grid-column-end : 배치를 종료할 열(가로)의 라인을 선택
	3. grid-column : 시작라인 / 종료라인;  => 시작라인부터 종료라인만큼의 열(가로)을 차지
	4. grid-row-start : 배치를 시작할 행(세로)의 라인을 선택
	5. grid-row-end : 배치를 종료할 행의 라인을 선택
	6. grid-row : 시작라인 / 종료라인;  => 시작라인부터 종료라인만큼의 행(세로)을 차지



- 영역이름으로 그리드를 정의 : grid-template-areas 속성
	각 영역(grid-item)에 이름을 붙히고 그 이름을 이용해서 자유롭게 배치하는 방법

	1. grid item 요소들에 각각 grid-area속성을 이용해서 영역 이름을 지정해준다.
	2. grid container에 grid-template-areas속성으로 
		각 item들의 이름을 활용해서 레이아웃을 배치한다.













