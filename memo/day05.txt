- flexbox
   레이아웃을 만드는 하나의 방식이다.
   복잡하지 않고 유연하게 요소들의 크기와 순서를 정하여 배치할수 있다.

- flexbox
   1. flex container
   레이아웃을 적용하여 배치하려는 요소들을 감싸고 있는 부모 요소

   2. flex item
   실질적으로 배치하고싶은 요소들을 의미하며 flex-container의 자식요소가된다.
   하나의 flex container는 여러개의 flex item을 가질수 있다.

   3. main axis(주축)
   자식 요소가 기본적으로 배치되는 방향

   4. cross axis(교차축)
   주축을 가로지르는 방향

- flex-container를 만드는 방법
   flex-container로 지정하고싶은 요소에 display:flex 속성을 지정한다.

- flex-container에 관련된 CSS속성
   flex-direction : 주축의 방향을 지정하는 속성
   row : 가로방향

   column : 세로방향

   justify-content 속성 
   컨테이너의 주축을 기준으로 요소들을 정렬할수있는 속성
   center : 주축을 기준으로 중앙정렬
   space-between : 첫 아이템과 마지막 아이템을 양 끝에 배치해놓고
           나머지 아이템들을 동일한 간격으로 정렬한다.

   space-around : 모든 아이템들을 동일한 간격으로 정렬한다.

  
   align-items속성 
   컨테이너의 교차축을 기준으로 아이템들을 정렬하는 속성
   
   flex-wrap 속성
   컨테이너 내부의 요소들이 많거나 크기가 커서 컨테이너를 넘어가게 됐을때
   한줄로 보여줄것인지 여러줄로 보여줄것인지 결정하는 속성

   1. nowrap : flex-wrap속성의 기본값으로 줄바꿈을 하지않고 아이템들을 한줄로 보여준다.
          만약에 컨테이너 크기가 작다면 각각 아이템들의 크기가 줄어든다.

   2. wrap : 컨테이너의 크기가 작다면 줄바꿈해서 여러줄로 보여준다.

- 시맨틱 태그(Semantic Tag)
   태그 자체적으로 의미를 부여하고 있는 태그
   ** 태그에 기능은 없지만 의미가 부여된 div태그들

- 시맨틱 태그의 종류
1. <header> : 페이지의 헤더 영역을 의미하는 태그 , 주로 페이지의 최상단에 위치한다.

2. <footer> : 페이지의 푸터 영역을 의미하는 태그, 회사정보 등 어떠한 정보를 가지고 있는 영역
      주로 페이지 최하단에 위치한다.

3. <nav> : 다른 페이지로 이동하는 네비게이션(카테고리)요소를 담은 영역

4. <main> : 페이지의 주요 컨텐츠가 들어가는 영역

5. <aside> : 주 컨텐츠 내용과는 거리가 멀지만 분리된 영역으로 사용할 영역
        주로 사이드바로 사용한다.

6. <section> : 메인 영역안에서 컨텐츠를 나눌때 사용하는 영역

7. <article> : 독립적으로 반복되는 컨텐츠를 가진 영역





- position
	HTML의 요소를 좀 더 자유롭게 배치할 수 있는 속성


- position 속성의 속성값
1. ststic(기본값)
	HTML의 요소가 일반적인 흐름으로 배치되는 속성
2. relative
	static과 동일하게 일반적인 흐름으로 배치되는 속성
	차이점은 현재 자신의 위치를 기준으로 배치를 좀 더 자유롭게 할 수 있는 여러가지 속성을 사용할 수 있다.

	top, right, left, bottom 속성을 사용할 수 있다.

3. absolute(절대적인)
	일반적인 배치 흐름과 무관하게 요소를 배치할 수 있다.
	position : static이 아닌 부모요소를 기준으로 배치한다.
	만약 조상요소 중에 static이 아닌 요소가 없다면 body를 기준으로 배치된다.

4. fixed
	브라우저 화면상으로 보이는 영역(viewport)에 고정되도록 배치한다.
	즉, 스크롤을 내려서 보여지는 화면이 바뀌어도 fixed로 고정한 요소는
	그 위치에 절대적으로 고정된다.

5. sticky
	** 메뉴바
	** 바로 직속 부모에 높이를 줘야함
	처음에는 일반적인 흐름에 배치되다가
	스크롤이 일정위치(그 요소가 존재하는 위치)에 도달하게 되면
	fixed처럼 화면 상단에 고정된다.

	**주의사항 : 부모요소에 height속성이 지정되어 있어야 한다.



- Z-index 속성
	** position: absolute; 에서 쓴다. 생각해보면 앱솔루트가 다 겹치니까
	요소가 배치될 때 겹친다면 어떤 요소가 위로 올라올지 결정해주는 속성
	속성값에 지정해주는 숫자가 높을수록 해당요소가 위로 올라온다.

	** 주의사항 : position속성이 static이 아닌 요소에만 적용이 가능하다.

	




























