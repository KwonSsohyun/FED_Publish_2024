- 제어문자 종류
	1. \n : 문자열 안에서 줄바꿈을 해주는 제어문자
	2. \t : 문자열 안에서 일정간격을 띄어주는 제어문자
	3. \" \' : 문자열 안에서 큰따옴표,작은따옴표를 표현해주는 제어문자
	4. \\ : 문자열 안에서 역슬래시를 표현해주는 제어문자



- 형변환 (type Casting)
	1. 데이터의 자료형을 다른 자료형으로 변환할 수 있는 문법
	2. js에서 형변환은 자동형변환과 강제형변환으로 나뉜다.

	- 강제 형변환(명시적 형변환)
	  개발자가 직접 데이터의 자료형을 변환해주는 것
	  자바스크립트가 가진 형변환 함수를 사용해야한다.
	
	  - 형변환 함수 종류
		1. Number() : 소괄호에 넘겨준 데이터를 number타입으로 변환해주는 기능
			      단, 소괄호 안에 넘겨주는 데이터가 정수로 변환이 가능한 데이터여야한다.
		2. Boolean() : 소괄호에 넘겨준 데이터를 boolean타입으로 변환해주는 기능
			       0, 0.0., "" ▶ 거짓(False)
			       거짓을 제외한 모든 값 => 참(True)
		3. String() : 소괄호에 넘겨준 데이터를 String타입으로 변환해주는 기능
		4. parseInt() : 소괄호에 넘겨준 데이터를 숫자 중에서 소숫점이 붙지 않은 정수형 데이터로 변환
				ex) 1.5 ▶ 1  /  0.5 ▶ 0
		

	- 자동 형변환(암묵적 형변환)
	  자바스크립트가 알아서 필요에 따라 자동으로 데이터의 자료형을 변경해준다.

	  - 자동 형변환이 가능한 경우
		1. string + 다른 타입 값 ▶ string
		2. 다른 타입 값 * 문자열 ▶ number
		3. boolean + number ▶ number
		4. boolean * number ▶ number



- document.write() 함수
	자바스크립트로 웹문서에 데이터를 출력시키고 싶을 때 사용하는 기능

	* document 객체 : 작성하고 있는 웹 문서를 의미한다.
			 웹페이지에 존재하는 HTML요소에 접근하고자 할 때도 
			 반드시 document객체를 사용해서 접근한다.


- with문
	객체가 가진 기능이나 속성을 참조하기 위해 사용한다.
	주어진 객체의 속성이나 기능을 with문의 영역을 통해서 간편하게 작성할 수 있다.

	with(document){
		write(); => document객체가 가진 기능들을 document.을 사용하지 않고 
			    간단하게 사용할 수 있다.
	}



- prompt() 함수
	웹문서 상에서 문자열을 입력받을 때 사용하는 함수
	prompt함수로 웹문서에서 입력받는 데이터를 변수에 담아서 사용할 수도 있다.

	let 변수명 = prompt("출력해주고 싶은 문자열");



- alert() 함수, confirm() 함수
	웹문서 상에서 사용자와 상호작용하기 위한 대화상자를 만드는 기능

	1. alert() : 단순한 정보를 사용자에게 표시하기 위한 대화상자로 사용된다.
		     alert("사용자 표시하고 싶은 문자열");

	2. confirm() : 사용자에게 "예" "아니오" 선택지를 제공하는 대화상자
		       confirm()함수는 사용자가 "예"를 선택하면 함수 자체에서 true값 반환
				     사용자가 "아니오"를 선택하면 함수 자체에서 false값 반환



- 연산자(Operator)
	특수한 기능을 하는 특수문자

	- 연산자의 우선순위
		최 - 최우선 연산자 : () []
		단 - 단항 연산자 : 연산자를 기준으로 피연산자가 한개인 연산자
		산 - 산술 연산자 : + - * / %
		쉬 - 쉬프트 연산자
		관 - 관계 연산자
		논 - 논리 연산자
		삼 - 삼항 연산자
		대 - 대입 연산자


	- 관계 연산자(비교 연산자)
		값들을 비교할 때 사용하는 연산자
		값들을 비교하고 나서 결과를 true, false 값으로 반환한다.

		>	: 크다
		>=	: 크거나 같다
		<	: 작다
		<=	: 작거나 같다

		==	: 같다 (타입검사 X) | 10 == "10" ▶ true
		!=	: 같지 않다 (타입검사 X)

		===	: 같다 (타입검사 O) | 10 === "10" ▶ false
		!==	: 같지 않다 (타입검사 O)


	- 조건식
		결과를 true, false로 반환하는 식


	- 논리 연산자
		여러 조건식을 연결하거나 조건식의 결과를 반전시킬 때 사용하는 연산자

		&&	: 조건식1 && 조건식2 ▶ 연결해준 두 조건식 모두 true를 반환해야 결과를 true로 반환

		||	: 조건식1 || 조건식2 ▶ 연결해준 두 조건식 중 하나라도 true 반환하면 결과를 true로 반환

		!	: !조건식 ▶ 조건식이 반환하는 값이 true면 false로 바꾸고
				                   false면 true로 바꾼다.


	- 삼항 연산자
		조건식 ? 조건식의 결과가 true일때 반환할 값 : 조건식의 결과가 false일때 반환할 값;

		* 조건식을 기준으로 true를 반환한다면 콜론(:)을 기준으로 왼쪽에 있는 값이 반환된다.
		               false를 반환한다면 콜론(:)을 기준으로 오른쪽에 있는 값이 반환된다.


	- 대입 연산자
		=	: 오른쪽에 있는 값을 왼쪽의 저장공간에 대입하는 연산자
		

	- 복합대입 연산자(누적 연산자)
		+=	: 오른쪽에 있는 값을 왼쪽의 저장공간이 가지고 있는 값에 더하고 
			  그 결과를 다시 저장공간에 대입힌다.
			  let number = 10;
			  number += 20;  ▶ number = number + 20;

		-=	: 오른쪽에 있는 값을 왼쪽의 저장공간 가지고 있는 값으로부터 빼고
			  그 결과를 다시 저장공간에 대입힌다.
			  let number = 10;
			  number -= 20;  ▶ number = number - 20;

		*=	: 오른쪽에 있는 값을 왼쪽의 저장공간 가지고 있는 값으로부터 곱하고
			  그 결과를 다시 저장공간에 대입힌다.

		/=	: 오른쪽에 있는 값을 왼쪽의 저장공간 가지고 있는 값으로부터 나누고
			  그 결과를 다시 저장공간에 대입힌다.


	- 증감 연산자
		값을 1 증가, 1 감소 시키는 연산자
		
		++	: 값을 1 증가 시키는 연산자
		--	: 값을 1 감소 시키는 연산자

		- 전위형 : ++값 / --값
			 값을 먼저 1증가,감소 시키고 값을 사용한다.

		- 후위형 : 값++ / 값--
			 값을 먼저 사용하고 1증가,감소 시킨다.






- 제어문
	프로그램의 실행흐름을 제어할 수 있는 문법
	프로그램의 실행흐름 : 프로그램이 실행되는 순서 => 일반적으로 위에서 아래로 순서대로 실행한다.

	조건문, 반복문, 보조(기타) 제어문이 있다.

	- 조건문
	  특정한 조건을 주고 참과 거짓의 결과에 따라 프로그램의 실행흐름을 바꾸는 것

	- 반복문
	  프로그램에서 특정한 코드를 n번 반복 실행해야할 때 사용하는 문법

	- 보조(기타) 제어문
	  강제로 프로그램의 흐름을 종료하거나 특정한 반복구간을 뛰어넘고 싶을 때 사용하는 키워드



- 조건문
	특정 조건에 따라 코드가 실행될지 말지 결정할 수 있는 문법
	if문 / else if문 / else문
	switch문

	▶ if문 (만약 ~ 라면)
	  	if(조건식){
			// if문 소괄호 안의 조건식이 true를 반환할 때 실행할 코드
		}
	  
	  * if문 소괄호 안의 조건식이 true를 반환하면 중괄호 영역 안의 코드를 순서대로 실행시키고
	                        false를 반환하면 중괄호 영역 안을 무시한다.


	- else if문 (~가 아니고 ~라면)
	  	if(조건식){
			// if문 조건식이 true일때 실행할 코드

		} else if(조건식){
			// 위에 있는 if문의 조건이 거짓이고
			   else if문의 조건이 true일때 실행할 코드
		} else if(조건식){
			// 위에 있는 조건이 모두 거짓을 반환하고
			   해당 else if문의 조건이 true일때 실행할 코드
		}
		
		* 위에 있는 조건식에서 false를 반환하고 
		  해당 else if문의 조건식에서 true를 반환하면 영역안의 코드를 실행한다.
		  else if문을 여러개 사용해서 조건을 여러번 달아줄 수 있다.


	- else문	(~가 아니라면)
		if(조건식){
			// if문 조건식이 true일때 실행할 코드

		} else{
			// if문의 조건식이 false를 반환한다면 
			   무조건 실행할 코드를 작성
		}

		// -------------------------------------------

		if(조건식){
			// if문 조건식이 true일때 실행할 코드

		} else if(조건식){

		} else if(조건식){

		} else{
			// 위에 있는 조건이 전부 다 false를 반환해야
			   else문 영역안의 코드를 실행한다.
		}

		* 위에 작성한 if문과 else if문의 조건식이 모두 false를 반환할 때
		  else문 영역 안의 코드를 실행한다.

		* else문과 else if문은 if문 없이는 사용할 수 없다!



	▶ switch문
		1. 처리해야하는 경우의 수가 많을 때 좀 더 유용한 조건문
		2. if문과 달리 조건식이 아닌 표현식을 작성한다.
		   표현식 : 어떠한 값을 변환하는 것 => 변수명
		3. 표현식이 반환하는 값을 정확하게 알고 있어야 사용할 수 있다.
		4. case문 안에서 break문을 써줘야 해당 switch문을 빠져나갈 수 있다.


		- 기본구조
			switch(변수명){
				case 값1 : 
					변수가 반환하는 값이 값1일때 실행할 코드;
					break;

				case 값2	:
					변수가 반환하는 값이 값2일때 실행할 코드;
					break;

				case 값3	:
					변수가 반환하는 값이 값3일때 실행할 코드;
					break;

				,,...

				default :
					위 case문에서 아무도 변수에서 반환하는 값을 잡지 못했을 때 실행할 코드;
					break;
			}




- 반복문
	특정 코드를 반복실행하고 싶을 때 사용하는 문법
	for문 while문 두가지 종류가 있다.

	▶ for문
		for(초기식; 조건식; 증감식){
			// 반복 실행하고 싶은 코드
		}
	

		1. 초기식 : 처음에 설정할 값 => 변수를 한개 초기화한다.
		2. 조건식 : 조건이 true면 영역 안의 코드를 한번 실행한다.
			  조건이 false를 반환하면 for문이 종료된다.
		3. 증감식 : 초기식에서 설정한 값이 얼마나 증가,감소할지를 정하는 식이다.(증감식++ / 복합대인연산자)


		for(let i=0; i<5; i++){
			console.log("안녕");
		}

		
		- for문의 실행순서
		  제일 먼저 "초기식"이 수행되고, 이 다음부터는 조건식이 true인 동안
		  "조건식" => "반복 실행할 문장" => "증감식" 순서로 반복된다.
		  증감식에 의해서 변수값이 증가,감소 하다가 조건식에서 false를 반환하는 순간 for문이 종료된다.

		  * 초기식에서 초기화한 변수는 for문 영역 안에서만 사용가능하다.




- 보조(기타) 제어문
	break / continue

	- break : break를 키워드를 만나는 즉시 반복문을 종료한다.
		  주로 반복문 안에서 특정 조건을 주고 반복이 강제로 종료되게 할때 사용한다.
		  또는 case문 안에서 switch문을 빠져나가는 용도로 사용한다.

	- continue : continue 키워드를 만나는 즉시 바로 다음 반복으로 넘어간다.
		     주로 반복문 안에서 특정 반복구간은 뛰어넘고 싶을 때 사용한다.




	